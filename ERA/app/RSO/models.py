# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ –†–µ—Å—É—Ä—Å–æ-—Å–Ω–∞–±–∂–∞—é—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
import datetime
from itertools import chain

from django.db import models
from django.db.models.query import EmptyQuerySet
from django.db.models import Prefetch
from django.utils.functional import cached_property

from simple_history.models import HistoricalRecords


def wells_path(instance, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫–æ–ª–æ–¥—Ü–µ–≤ –ø–æ id üòÖ """
    try:
        return 'photos_object/wells_{0}/{1}'.format(instance.pk, filename)
    except Exception as e:
        print(f"Exception {e}")


def wells_scheme(instance, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∫–æ–ª–æ–¥—Ü–µ–≤ –ø–æ id üòÖ """
    try:
        return 'scheme/wells_{0}/{1}'.format(instance.pk, filename)
    except Exception as e:
        print(f"Exception {e}")


def water_pipeline_scheme(instance, filename):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞ –ø–æ id üòÖ """
    try:
        return 'scheme/water_pipeline_{0}/{1}'.format(instance.pk, filename)
    except Exception as e:
        print(f"Exception {e}")


class Well(models.Model):
    """
    –°–∫–≤–∞–∂–∏–Ω–∞
    """
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    section_water_pipeline = models.ForeignKey(
        "SectionOfTheWaterPipeline",
        on_delete=models.CASCADE,
        related_name='wells',
        verbose_name='–£—á–∞—Å—Ç–æ–∫ —Å–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞',
    )
    coordinate_northern_latitude = models.FloatField(verbose_name='–°–µ–≤–µ—Ä–Ω–∞—è —à–∏—Ä–æ—Ç–∞', null=True, blank=True)
    coordinates_eastern_longitude = models.FloatField(verbose_name='–í–æ—Å—Ç–æ—á–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞', null=True, blank=True)
    manage_org = models.CharField(max_length=255, verbose_name="–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    history = HistoricalRecords()

    def last_well_repair(self):
        """     
        Api function
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–º–æ–Ω—Ç—ã —Å–∫–∞–∂–∏–Ω—ã
        """
        try:
            return self.well_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        try:
            return (f'‚Ññ{self.general_well_information.number_well}' +
                    f' // –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {self.manage_org}')
        except:
            return f'–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω: // –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {self.manage_org}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω—ã'


class WellRepair(models.Model):
    """–†–µ–º–æ–Ω—Ç/—Ç–µ—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='well_repair',
        verbose_name='–°–∫–≤–∞–∂–∏–Ω–∞',
    )
    TYPE_CHOICES = (
        ("–ü–æ —Ç–æ–∫—É", "–ü–æ —Ç–æ–∫—É"),
        ("–ü–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—é", "–ü–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—é"),
        ("–ù–µ—Ç —Å–µ—Ç–∏", "–ù–µ—Ç —Å–µ—Ç–∏"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç"),
    )
    BROKEN_CHOICES = (
        ("–ó–∞–ø–æ—Ä–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞", "–ó–∞–ø–æ—Ä–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞"),
        ("–ê–≥—Ä–µ–≥–∞—Ç –Ω–∞—Å–æ—Å–Ω—ã–π", "–ê–≥—Ä–µ–≥–∞—Ç –Ω–∞—Å–æ—Å–Ω—ã–π"),
        ("–ö–ò–ü–∏–ê", "–ö–ò–ü–∏–ê"),
        ("N –ª–∏–Ω–∏–∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞", "N –ª–∏–Ω–∏–∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞"),
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', choices=TYPE_CHOICES,
                                      null=True, blank=True)
    broken = models.CharField(max_length=255, verbose_name="–°–ª–æ–º–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", choices=BROKEN_CHOICES, null=True,
                              blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'{self.well}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã'


class DynamicWellParametrs(models.Model):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.OneToOneField(
        Well,
        on_delete=models.CASCADE,
        related_name='dynamic_well_parametrs',
        primary_key=True,
    )

    static_well_level = models.FloatField(verbose_name='–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–≤–∞–∂–∏–Ω—ã, –º',
                                          help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    dynamic_well_level = models.FloatField(verbose_name='–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–≤–∞–∂–∏–Ω—ã, –º',
                                           help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    history = HistoricalRecords()

    def __str__(self):
        return f'–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {self.well_id}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω'


class GeneralWellInformation(models.Model):
    """
    –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ
    –†–∞–∑–¥–µ–ª : –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ
    """
    TYPE_OF_PAVILION_CHOICES = (
        ("–ù–∞–¥–∑–µ–º–Ω—ã–π", "–ù–∞–¥–∑–µ–º–Ω—ã–π"),
        ("–ü–æ–ª—É–∑–∞–≥—É–±–ª–µ–Ω–Ω—ã–π", "–ü–æ–ª—É–∑–∞–≥—É–±–ª–µ–Ω–Ω—ã–π"),
        ("–ü–æ–¥–∑–µ–º–Ω—ã–π", "–ü–æ–¥–∑–µ–º–Ω—ã–π"),
    )
    TYPE_OF_PROPERTY_CHOICES = (
        ("–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è"),
        ("–ß–∞—Å—Ç–Ω–∞—è", "–ß–∞—Å—Ç–Ω–∞—è"),
        ("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è"),
        ("–ê—Ä–µ–Ω–¥–∞", "–ê—Ä–µ–Ω–¥–∞"),
        ("–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –ø–æ–ª—å–∑–≤–∞–Ω–∏–µ"),
    )
    well_id = models.OneToOneField(
        Well,
        on_delete=models.CASCADE,
        related_name='general_well_information',
        primary_key=True,
    )
    type_of_property = models.CharField(max_length=50, choices=TYPE_OF_PROPERTY_CHOICES,
                                        verbose_name='–í–∏–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', )
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True)
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    number_well = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã', null=True,
                                                 help_text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ", )
    absolute_mark_of_the_wellhead = models.DecimalField(max_digits=20, decimal_places=2,
                                                        verbose_name='–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ —É—Å—Ç—å—è', null=True, blank=True,
                                                        help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', )
    deep = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–ì–ª—É–±–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã, –º', null=True,
                               blank=True, help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π')
    numbers_of_layers = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤', null=True, blank=True)
    purpose_well = models.CharField(max_length=255, verbose_name='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', null=True)
    usage_information = models.CharField(max_length=255, verbose_name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏', null=True, blank=True)
    usage_license = models.CharField(max_length=255, verbose_name='–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', null=True,
                                     blank=True)
    photo_objcect = models.ImageField(upload_to=wells_path, null=True, blank=True)
    scheme_object = models.ImageField(upload_to=wells_scheme, null=True, blank=True)
    river_basin = models.CharField(max_length=255, verbose_name='–†–µ—á–Ω–æ–π –±–∞—Å—Å–µ–π–Ω', null=True, blank=True)
    water_managment_region = models.CharField(max_length=255, verbose_name='–í–æ–¥–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', null=True,
                                              blank=True)
    underground_water_pool = models.CharField(max_length=255, verbose_name='–ë–∞—Å—Å—Å–µ–π–Ω –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥', null=True,
                                              blank=True)
    underground_water_deposit = models.CharField(max_length=255, verbose_name='–ú–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏ –ø–æ–¥–∑–µ–º–Ω—ã—Ö –≤–æ–¥', null=True,
                                                 blank=True)
    water_bearing_horizon = models.CharField(max_length=255, verbose_name='–í–æ–¥–æ–Ω–æ—Å—Ç–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç', null=True, blank=True)
    position_in_relief = models.CharField(max_length=255, verbose_name='–ü–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–ª—å–µ—Ñ–µ', null=True, blank=True)
    type_of_water_consumption = models.CharField(max_length=255, verbose_name='–í–∏–¥ –≤–æ–¥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è', null=True,
                                                 blank=True)
    water_user = models.CharField(max_length=255, verbose_name='–í–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', null=True, blank=True)
    drilling_method = models.CharField(max_length=255, verbose_name='–°–ø–æ—Å–æ–± –±—É—Ä–µ–Ω–∏—è', null=True, blank=True)
    drilling_organization = models.CharField(max_length=255, verbose_name='–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏–≤—à–∞—è –±—É—Ä–µ–Ω–∏–µ', null=True,
                                             blank=True)
    drilling_start_date = models.DateField(verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –±—É—Ä–µ–Ω–∏—è', null=True, blank=True)
    drilling_end_date = models.DateField(verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É—Ä–µ–Ω–∏—è', null=True, blank=True)
    type_of_pavilion = models.CharField(max_length=25, choices=TYPE_OF_PAVILION_CHOICES,
                                        verbose_name='–¢–∏–ø –ø–∞–≤–∏–ª—å–æ–Ω–∞', null=True)
    construction_of_pavilion = models.CharField(max_length=255, verbose_name='–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–∞–≤–∏–ª—å–æ–Ω–∞', null=True,
                                                blank=True)
    inv_number_of_pavilion = models.CharField(max_length=255, verbose_name='–ò–Ω–≤–µ—Ä—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞', null=True,
                                              blank=True)
    date_of_signing_the_acceptance_certificate = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–µ–º–æ-—Å–¥–∞—Ç–æ—á–Ω–æ–≥–æ –∞–∫—Ç–∞',
                                                                  null=True, blank=True)
    well_commissioning_date = models.DateField(verbose_name='–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–≤–∞–∂–∏–Ω—ã –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', null=True,
                                               blank=True)
    well_plugging_date = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–∞–º–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {self.number_well}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ'
        ordering = ['-well_id']


class TechnicalWellInformation(models.Model):
    """
    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ
    –†–∞–∑–¥–µ–ª : –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ
    """
    well_id = models.OneToOneField(
        Well,
        on_delete=models.CASCADE,
        primary_key=True,
        related_name='technical_well_information',
    )
    diametr_casing_pipe = models.DecimalField(max_digits=20, decimal_places=2,
                                              verbose_name='–î–∏–∞–º–µ—Ç—Ä –æ–±—Å–∞–¥–Ω–æ–π —Ç—Ä—É–±—ã', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    amount_of_reinforcment = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–º–∞—Ç—É—Ä—ã', null=True, blank=True)
    amount_of_control_device = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞',
                                                              null=True,
                                                              blank=True)
    amount_of_filter = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤', null=True, blank=True)
    amount_of_lifting_pipe = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω—ã—Ö —Ç—Ä—É–±', null=True,
                                                            blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {self.well_id}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–∞—Ö'
        ordering = ['-well_id']


class Reinforcment(models.Model):
    """
    –ê—Ä–º–∞—Ç—É—Ä–∞
    –†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    """
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='reinforcments',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    reinforcment_name = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', null=True, blank=True)
    reinforcment_type = models.CharField(max_length=255, verbose_name='–¢–∏–ø', null=True, blank=True)
    nominal_diametr = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–£—Å–ª–æ–≤–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä', null=True,
                                          help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    weight = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–ú–∞—Å—Å–∞ –µ–¥–∏–Ω–∏—Ü—ã, –∫–≥.', null=True,
                                 help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    driver_type = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø—Ä–∏–≤–æ–¥–∞', null=True, blank=True)
    year_of_manufacture = models.DateField(verbose_name='–ì–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', null=True, blank=True)
    history = HistoricalRecords()

    def last_reinforcment_repair(self):
        """Api function"""
        try:
            return self.reinforcment_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        return (f'ID: {self.pk}' +
                f'// –°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ê—Ä–º–∞—Ç—É—Ä–∞'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ê—Ä–º–∞—Ç—É—Ä–∞'


class ReinforcmentRepair(models.Model):
    """–†–µ–º–æ–Ω—Ç/—Ç–µ—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞—Ä–º–∞—Ç—É—Ä—ã –Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–µ"""
    reinforcment = models.ForeignKey(
        Reinforcment,
        on_delete=models.CASCADE,
        related_name='reinforcment_repair',
        verbose_name='–ê—Ä–º–∞—Ç—É—Ä–∞',
    )
    TYPE_CHOICES = (
        ("–ê–≤–∞—Ä–∏—è", "–ê–≤–∞—Ä–∏—è"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', choices=TYPE_CHOICES,
                                      null=True, blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'{self.reinforcment}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã –Ω–∞ —Å–≤–∞–∂–∏–Ω–µ'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—ã –Ω–∞ —Å–≤–∞–∂–∏–Ω–µ'


class ProcessPipe(models.Model):
    """
    –¢—Ä—É–±–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±–≤—è–∑–∫–∏
    –†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    """
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='process_pipes',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    name_of_site = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–µ–∏ —É—á–∞—Å—Ç–∫–∞', null=True, blank=True)
    lenght = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–î–ª–∏–Ω–∞, –º.', null=True,
                                 help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    outside_diametr = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–ù–∞—Ä—É–∂–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä, –º.',
                                          null=True, help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    wall_thickness = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏, –º–º', null=True,
                                         help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    metall_mark = models.CharField(max_length=255, verbose_name='–ú–∞—Ä–∫–∞ –º–µ—Ç–∞–ª–ª–∞', null=True, blank=True)
    installation_date = models.DateField(verbose_name='–î–∞—Ç–∞ –º–æ–Ω—Ç–∞–∂–∞', null=True, blank=True)
    GOST_group_pipe = models.CharField(max_length=255, verbose_name='–ì–û–°–¢ –≥—Ä—É–ø–ø–∞ —Ç—Ä—É–±', null=True, blank=True)
    number_of_certificate = models.DecimalField(max_digits=20, decimal_places=2,
                                                verbose_name='–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞', null=True,
                                                help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', blank=True)
    strength_and_density_trial_param = models.CharField(max_length=255,
                                                        verbose_name='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å',
                                                        null=True, blank=True)
    strength_and_density_trial_date = models.DateField(verbose_name='–î–∞—Ç–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –Ω–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—á–Ω–æ—Å—Ç—å',
                                                       null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}' +
                f'ID: {self.pk}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –¢—Ä—É–±–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±–≤—è–∑–∫–∏'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –¢—Ä—É–±—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–π –æ–±–≤—è–∑–∫–∏'


class ControlDevice(models.Model):
    """
    –ü—Ä–∏–±–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞
    –†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    """
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='control_devices',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    serial_number = models.CharField(max_length=255, verbose_name='–°–µ—Ä–∏–π–Ω—ã–π ‚Ññ —Å—á—ë—Ç—á–∏–∫–∞', unique=True,
                                     help_text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
    purpose_control_device = models.CharField(max_length=255, verbose_name='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', null=True, blank=True)
    type_control_device = models.CharField(max_length=255, verbose_name='–¢–∏–ø', null=True, blank=True)
    model_control_device = models.CharField(max_length=255, verbose_name='–ú–æ–¥–µ–ª—å', null=True, blank=True)
    manufacturer = models.CharField(max_length=255, verbose_name='–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å', null=True, blank=True)
    year_of_manufacture = models.DateField(verbose_name='–ì–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', null=True, blank=True)
    settings_and_parametrs = models.CharField(max_length=255, verbose_name='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', null=True,
                                              blank=True)
    date_of_entry_into_operation = models.DateField(verbose_name='–î–∞—Ç–∞ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', null=True, blank=True)
    capacity = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–ú–æ—â–Ω–æ—Å—Ç—å, –∫–≤—Ç', null=True, blank=True)
    date_of_check = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–∫–∏', null=True, blank=True)
    calibration_interval = models.DecimalField(max_digits=20, decimal_places=2,
                                               verbose_name='–ú–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª', null=True, blank=True,
                                               help_text='–ú–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', )
    history = HistoricalRecords()

    def __str__(self):
        return (f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}' +
                f'–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {self.serial_number}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ü—Ä–∏–±–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ü—Ä–∏–±–æ—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞'


class ControlDeviceValue(models.Model):
    """
    –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞
    –†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
    """
    control_device_serial_number = models.ForeignKey(
        ControlDevice,
        to_field='serial_number',
        on_delete=models.CASCADE,
        related_name='values_of_control_device',
    )
    date_value = models.DateField(verbose_name='–¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü)', null=True, blank=True)
    begin_value = models.CharField(max_length=255, verbose_name='–ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—á.–ø–µ—Ä–∏–æ–¥–∞', null=True,
                                   blank=True)
    end_value = models.CharField(max_length=255, verbose_name='–ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–µ—Ü —Ä–∞—Å—á.–ø–µ—Ä–∏–æ–¥–∞', null=True, blank=True)
    metr_consuption = models.CharField(max_length=255, verbose_name='–†–∞—Å—Ö–æ–¥ —Å—á—ë—Ç—á–∏–∫–∞', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–°–µ—Ä–∏–π–Ω—ã–π –Ω–º–æ–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–∞: {self.control_device_serial_number.serial_number}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞ '
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—á–µ—Ç–∞'


class LiftingPipe(models.Model):
    """–†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='lifting_pipes',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    pipe_number_from_the_pump = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä —Ç—Ä—É–±—ã –æ—Ç –Ω–∞—Å–æ—Å–∞', null=True,
                                                               blank=True)
    lenght = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–î–ª–∏–Ω–∞, –º.', null=True, blank=True)
    material = models.CharField(max_length=255, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', null=True, blank=True)
    technical_condition_safety_rope = models.CharField(max_length=255,
                                                       verbose_name='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–æ–≥–æ —Ç—Ä–æ—Å—Å–∞',
                                                       null=True, blank=True)
    connection_type = models.CharField(max_length=255, verbose_name='–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', null=True, blank=True)
    technical_condition_connection = models.CharField(max_length=255, verbose_name='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
                                                      null=True, blank=True)
    technical_condition_pipe = models.CharField(max_length=255, verbose_name='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±—ã', null=True,
                                                blank=True)
    exploitation_time = models.DateTimeField(verbose_name='–í—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏', null=True,
                                             blank=True)  # –ß–¢–û –ó–ù–ê–ß–ò–¢ –≠–¢–û –ü–û–õ–ï?
    history = HistoricalRecords()

    def last_lifting_pipe_repair(self):
        """Api function"""
        try:
            return self.lifting_pipe_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        return (f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}' +
                f'–ù–æ–º–µ—Ä —Ç—Ä—É–±—ã –æ—Ç –Ω–∞—Å–æ—Å–∞: {self.pipe_number_from_the_pump}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –í–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω–∞—è —Ç—Ä—É–±–∞'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –í–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω—ã–µ —Ç—Ä—É–±—ã'


class LiftingPipeRepair(models.Model):
    """–†–µ–º–æ–Ω—Ç/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω–æ–π —Ç—Ä—É–±—ã"""
    lifting_pipe = models.ForeignKey(
        LiftingPipe,
        on_delete=models.CASCADE,
        related_name='lifting_pipe_repair',
        verbose_name='–í–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω–∞—è —Ç—Ä—É–±–∞',
    )
    TYPE_CHOICES = (
        ("–ê–≤–∞—Ä–∏—è", "–ê–≤–∞—Ä–∏—è"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ä–µ–º–æ–Ω—Ç–∞', choices=TYPE_CHOICES, null=True,
                                      blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True, blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–∞–≤–Ω–∏—è', null=True,
                                           blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'{self.lifting_pipe}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –≤–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω–æ–π —Ç—Ä—É–±—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –≤–æ–¥–æ–ø–æ–¥—ä–µ–º–Ω—ã—Ö —Ç—Ä—É–±'


class Pump(models.Model):
    """–†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.OneToOneField(
        Well,
        on_delete=models.CASCADE,
        related_name='pumps',
        primary_key=True,
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    pump_output = models.FloatField(verbose_name='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞ —Å–∫–≤–≤–∞–∂–∏–Ω—ã, –º·∂æ/ —á–∞—Å',
                                    help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    power = models.FloatField(verbose_name='–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞, –í—Ç', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    operating_time_of_the_pump = models.FloatField(verbose_name='–ù–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å–æ—Å–∞, –º–æ—Ç–æ—á–∞—Å—ã', null=True, blank=True, )
    nominal_current_pump_motor = models.FloatField(verbose_name='–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è –Ω–∞—Å–æ—Å–∞, –ê', null=True,
                                                   blank=True, )
    pump_pressure = models.FloatField(verbose_name='–ù–∞–ø–æ—Ä –Ω–∞—Å–æ—Å–∞, –ú–ü–∞', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    type_of_pump = models.CharField(max_length=255, verbose_name='–¢–∏–ø –Ω–∞—Å–æ—Å–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    mark_of_pump = models.CharField(max_length=255, verbose_name='–ú–∞—Ä–∫–∞ –Ω–∞—Å–æ—Å–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    manufacturer = models.CharField(max_length=255, verbose_name="–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å", null=True, blank=True)
    manufacturer_number = models.CharField(max_length=255, verbose_name='–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä', unique=True, null=True,
                                           blank=True)
    pump_parametrs = models.CharField(max_length=255, verbose_name='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å–æ—Å–∞', null=True, blank=True)
    pump_output = models.DecimalField(max_digits=20, decimal_places=2,
                                      verbose_name='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞ —Å–∫–≤–≤–∞–∂–∏–Ω—ã, –º·∂æ/ —á–∞—Å',
                                      help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    deep_instalation_pump = models.DecimalField(max_digits=20, decimal_places=2,
                                                verbose_name='–ì–ª—É–±–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å–æ—Å–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
                                                help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    history = HistoricalRecords()

    def last_pump_repair(self):
        """Api function"""
        try:
            return self.pump_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        return (f'–ó–∞–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä: {self.manufacturer_number}' +
                f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ù–∞—Å–æ—Å'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ù–∞—Å–æ—Å—ã'


class PumpRepair(models.Model):
    """–†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –ù–∞—Å–æ—Å–∞"""
    pump = models.ForeignKey(
        Pump,
        on_delete=models.CASCADE,
        related_name='pump_repair',
        verbose_name='–ù–∞—Å–æ—Å',
    )
    TYPE_CHOICES = (
        ("–ê–≤–∞—Ä–∏—è", "–ê–≤–∞—Ä–∏—è"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', choices=TYPE_CHOICES,
                                      null=True, blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    conclusion_of_technical_inspection = models.CharField(max_length=255,
                                                          verbose_name='–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞',
                                                          null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞—Å–æ—Å–∞: {self.pump.manufacturer_number}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–ó–∞–º–µ–Ω–∞ –Ω–∞—Å–æ—Å–∞ –Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–µ'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–ó–∞–º–µ–Ω–∞ –Ω–∞—Å–æ—Å–∞ –Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–∞—Ö'


class Filter(models.Model):
    """–†–∞–∑–¥–µ–ª : –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='filters',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    construction_of_filter = models.CharField(max_length=255, verbose_name='–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True,
                                              blank=True)
    carcass_of_filter = models.CharField(max_length=255, verbose_name='–ö–∞—Ä–∫–∞—Å —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    filter_diametr = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–î–∏–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
                                         null=True, blank=True)
    numbers_of_hole = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True,
                                                     blank=True)
    location_of_hole = models.CharField(max_length=255, verbose_name='–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
                                        null=True, blank=True)
    filter_network = models.CharField(max_length=255, verbose_name='C–µ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    type_of_network = models.CharField(max_length=255, verbose_name='–¢–∏–ø —Å–µ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    diametr_of_network = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–î–∏–∞–º–µ—Ç—Ä —Å–µ—Ç–∫–∏', null=True,
                                             blank=True)
    granulometric_composition = models.CharField(max_length=255,
                                                 verbose_name='–ì—Ä–∞–Ω—É–ª–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –≥—Ä–∞–≤–∏–π–Ω–æ–π –∑–∞—Å—ã–ø–∫–∏', null=True,
                                                 blank=True)
    another_data = models.CharField(max_length=255, verbose_name='–ò–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    history = HistoricalRecords()

    def last_filter_repair(self):
        """Api function"""
        try:
            return self.filter_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        return (f'–°–∫–≤–∞–∂–∏–Ω—ã: {self.well_id}' +
                f'ID –§–∏–ª—å—Ç—Ä–∞: {self.pk}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –§–∏–ª—å—Ç—Ä'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –§–∏–ª—å—Ç—Ä—ã'


class FilterRepair(models.Model):
    """–†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—Ç—Ä–∞ –Ω–∞ —Å–∫–≤–∞–∂–∏–Ω–µ"""
    filter = models.ForeignKey(
        Filter,
        on_delete=models.CASCADE,
        related_name='filter_repair',
        verbose_name='–§–∏–ª—å—Ç—Ä',
    )
    TYPE_CHOICES = (
        ("–ê–≤–∞—Ä–∏—è", "–ê–≤–∞—Ä–∏—è"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', choices=TYPE_CHOICES,
                                      null=True, blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    conclusion_of_technical_inspection = models.CharField(max_length=255,
                                                          verbose_name='–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞',
                                                          null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'{self.filter}' +
                f'{self.date_of_repair}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞'
        verbose_name_plural = '2) –°–∫–≤–∞–∂–∏–Ω–∞ --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞'


class Debit(models.Model):
    """–†–∞–∑–¥–µ–ª : C–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='debits',
    )
    type_of_debit_measuring_device = models.CharField(max_length=100,
                                                      verbose_name='–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–µ–±–∏—Ç–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
                                                      null=True, blank=True)
    mark_of_debit_measuring_device = models.CharField(max_length=100,
                                                      verbose_name='–ú–∞—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–µ–±–∏—Ç–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
                                                      null=True, blank=True)
    data_of_debit_measuring = models.DateField(verbose_name='–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–µ–±–∏—Ç–∞', null=True, blank=True)
    debit_litr_in_sec = models.FloatField(verbose_name='–î–µ–±–∏—Ç —Å–∫–≤–∞–∂–∏–Ω—ã –ª/—Å–µ–∫', null=True, blank=True)
    debit_metr_in_hour = models.FloatField(verbose_name='–î–µ–±–∏—Ç —Å–∫–≤–∞–∂–∏–Ω—ã –º·∂æ/ —á–∞—Å', null=True, blank=True)
    debit_metr_in_day = models.FloatField(verbose_name='–î–µ–±–∏—Ç —Å–∫–≤–∞–∂–∏–Ω—ã –º·∂æ/ —Å—É—Ç–∫–∏', null=True, blank=True)
    specific_debit_litr_in_sec = models.FloatField(verbose_name='–£–¥–µ–ª—å–Ω—ã–π –¥–µ–±–∏—Ç —Å–∫–≤–∞–∂–∏–Ω—ã –ª/—Å–µ–∫',
                                                   help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    specific_debit_metr_in_hour = models.FloatField(verbose_name='–£–¥–µ–ª—å–Ω—ã–π –¥–µ–±–∏—Ç —Å–∫–≤–∞–∂–∏–Ω—ã –º·∂æ/ —á–∞—Å', null=True,
                                                    blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}' +
                f'ID: {self.pk}')

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –î–µ–±–∏—Ç'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –î–µ–±–∏—Ç'


class GeoTechnicalSection(models.Model):
    """–†–∞–∑–¥–µ–ª : –ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='geo_technical_sections',
    )
    layer_number = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–ª–æ—è', null=True, blank=True)
    scale_of_deep = models.DecimalField(max_digits=20, decimal_places=2, verbose_name='–®–∫–∞–ª–∞ –≥–ª—É–±–∏–Ω', null=True,
                                        blank=True)
    index = models.CharField(max_length=255, verbose_name='–ò–Ω–¥–µ–∫—Å', null=True, blank=True)
    breed_description = models.CharField(max_length=255, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã', null=True, blank=True)
    power_of_layer = models.IntegerField(verbose_name='–ú–æ—â–Ω–æ—Å—Ç—å —Å–ª–æ—è', null=True, blank=True)
    seam_roof_depth = models.DecimalField(max_digits=20, decimal_places=2,
                                          verbose_name='–ì–ª—É–±–∏–Ω–∞ –∑–∞–ª–µ–≥–∞–Ω–∏—è –∫—Ä–æ–≤–ª–∏ –ø–ª–∞—Å—Ç–∞, –º', null=True, blank=True)
    seam_sole_depth = models.DecimalField(max_digits=20, decimal_places=2,
                                          verbose_name='–ì–ª—É–±–∏–Ω–∞ –∑–∞–ª–µ–≥–∞–Ω–∏—è –ø–æ–¥–æ—à–≤—ã –ø–ª–∞—Å—Ç–∞, –º', null=True, blank=True)
    geological_age_of_the_passed_rocks = models.CharField(max_length=255,
                                                          verbose_name='–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–¥',
                                                          null=True, blank=True)
    geological_index = models.CharField(max_length=255, verbose_name='–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å', null=True, blank=True)
    to_appear_ground_water_level = models.DecimalField(max_digits=20, decimal_places=2,
                                                       verbose_name='–ü–æ—è–≤–∏–≤—à–∏–π—Å—è —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥, –º', null=True,
                                                       blank=True)
    to_appear_ground_water_level_date = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è —É—Ä–æ–≤–Ω—è –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥',
                                                         null=True, blank=True)
    installing_ground_water_level = models.DecimalField(max_digits=20, decimal_places=2,
                                                        verbose_name='–£—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Å—è —É—Ä–æ–≤–µ–Ω—å –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥, –º',
                                                        null=True,
                                                        blank=True)
    installing_ground_water_level_date = models.DateField(verbose_name='–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–≥–æ—Å—è —É—Ä–æ–≤–Ω—è –≥—Ä—É–Ω—Ç–æ–≤—ã—Ö –≤–æ–¥',
                                                          null=True, blank=True)
    laboratory_ground_deep = models.DecimalField(max_digits=20, decimal_places=2,
                                                 verbose_name='–ì–ª—É–±–∏–Ω–∞ –æ—Ç–±–æ—Ä–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –º', null=True,
                                                 blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ì–µ–æ–ª–æ–≥–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä–µ–∑ —Å–∫–≤–∞–∂–∏–Ω—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –ì–µ–æ–ª–æ–≥–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä–µ–∑—ã —Å–∫–≤–∞–∂–∏–Ω—ã'


class ChemicalCompositionOfWater(models.Model):
    """–†–∞–∑–¥–µ–ª : –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='chemical_compositions_of_water',
    )
    date_take_water_sample = models.DateField(verbose_name='–î–∞—Ç–∞ –≤–∑—è—Ç–∏—è –ø—Ä–æ–±—ã –≤–æ–¥—ã', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    time_take_water_sample = models.TimeField(verbose_name='–í—Ä–µ–º—è –≤–∑—è—Ç–∏—è –ø—Ä–æ–±—ã', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    data_analisys_water_sample = models.DateField(verbose_name='–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±—ã –≤–æ–¥—ã', null=True,
                                                  blank=True)
    number_of_protocol_sample = models.CharField(max_length=255, verbose_name='‚Ññ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±—ã', null=True,
                                                 blank=True)
    total_number_of_microbe = models.CharField(max_length=255, verbose_name='–û–±—â–µ–µ –º–∏–∫—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –ö–û–ï/–º–ª.', null=True,
                                               blank=True)
    common_coliform_bacteria = models.CharField(max_length=255, verbose_name='–û–±—â–∏–µ –∫–∞–ª–∏—Ñ–æ—Ä–º–Ω—ã–µ –±–∞–∫—Ç–µ—Ä–∏–∏, –ö–û–ï –≤ 100–º–ª.',
                                                null=True, blank=True)
    thermotolerant_coliform_bacteria = models.CharField(max_length=255,
                                                        verbose_name='–¢–µ—Ä–º–æ—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã–µ –±–∞–∫—Ç–µ—Ä–∏–∏, –ö–û–ï –≤ 100–º–ª.',
                                                        null=True, blank=True)
    coliphages = models.CharField(max_length=255, verbose_name='–ö–æ–ª–∏—Ñ–∞–≥–∏, –ë–û–ï/–º–ª.', null=True, blank=True)
    conclution = models.TextField(verbose_name='–ó–∞–∫–ª—é—á–µ–Ω–∏–µ', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    history = HistoricalRecords()

    def __str__(self):
        return f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –•–∏–º–∏—á–∏—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –≤–æ–¥—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–∞–≤—ã –≤–æ–¥—ã'


class ClearingWell(models.Model):
    """–†–∞–∑–¥–µ–ª : –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∫–≤–∞–∂–∏–Ω–µ"""
    well_id = models.ForeignKey(
        Well,
        on_delete=models.CASCADE,
        related_name='clearing_wells',
    )
    date_of_clorination = models.DateField(verbose_name='–î–∞—Ç–∞ —Ö–ª–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', null=True, blank=True)
    clorination_concentration = models.DecimalField(max_digits=20, decimal_places=2,
                                                    verbose_name='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ö–ª–æ—Ä–Ω–æ–π –≤–æ–¥—ã –º–≥/–¥–º·∂æ', null=True,
                                                    blank=True)
    time_on_contact = models.TimeField(verbose_name='–í—Ä–µ–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Ö–ª–æ—Ä–∞ —Å –ø–æ–¥–∑–µ–º–Ω–æ–π –≤–æ–¥–æ–π, —á.', null=True, blank=True)
    clearning_method = models.CharField(max_length=255, verbose_name='–°–ø–æ—Å–æ–± –æ—á–∏—Å—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    data_of_clearning = models.DateField(verbose_name='–î–∞—Ç–∞ —á–∏—Å—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    time_of_clearning = models.TimeField(verbose_name='–í—Ä–µ–º—è —á–∏—Å—Ç–∫–∏ —Å–∫–≤–∞–∂–∏–Ω—ã', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–°–∫–≤–∞–∂–∏–Ω–∞: {self.well_id}'

    class Meta:
        verbose_name = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –û—á–∏—Å—Ç–∫–∞ —Å–∫–≤–∞–∂–∏–Ω—ã'
        verbose_name_plural = '1) –°–∫–≤–∞–∂–∏–Ω–∞ --> –û—á–∏—Å—Ç–∫–∞ —Å–∫–≤–∞–∂–∏–Ω'


class WaterPumpingStation(models.Model):
    """
    –í–ó–£
    """
    manage_org = models.CharField(max_length=100, verbose_name='–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', help_text="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True)
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    power = models.FloatField(verbose_name='–ú–æ—â–Ω–æ—Å—Ç—å –í–ù–°, –º¬≥/—á.', null=True, blank=True)
    year_of_constraction = models.DateField(verbose_name='–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', null=True, blank=True)
    year_of_commissioning = models.DateField(verbose_name='–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', null=True, blank=True)
    total_area = models.FloatField(verbose_name='–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å, –∫–≤.–º.', null=True, blank=True)
    number_of_floors = models.PositiveBigIntegerField(verbose_name='–≠—Ç–∞–∂–Ω–æ—Å—Ç—å', null=True, blank=True)
    construction_of_pavilion = models.CharField(max_length=255, verbose_name='–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–∞–≤–∏–ª—å–æ–Ω–∞', null=True,
                                                blank=True)
    materials_of_wall = models.CharField(max_length=255, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω', null=True, blank=True)
    materials_of_roof = models.CharField(max_length=255, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä–æ–≤–ª–∏', null=True, blank=True)
    materials_of_foundation = models.CharField(max_length=255, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞', null=True,
                                               blank=True)
    history = HistoricalRecords()

    def filtered_smena(self):
        """
        Api function
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–º–µ–Ω—É
        """
        try:
            return self.smena.filter(flag_complete=False)
        except Exception as e:
            print(f"Exception {e}")

    def dynamic_settings_from_date(self, date):
        """
        Api function
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        """
        try:
            smena = set(self.smena.filter(dynamic_settings__date=date))
            all_query_list = []
            for x in smena:
                get = x.dynamic_settings.filter(date=date)
                all_query_list.append(get)
            all_query = list(chain.from_iterable(all_query_list))
            return all_query
        except Exception as e:
            print(f"Exception {e}")

    def chlorine_from_date(self, date):
        """
        Api function
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–ª–æ—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        """
        try:
            smena = set(self.smena.filter(chlorine__date=date))
            all_query_list = []
            for x in smena:
                get = x.chlorine.filter(date=date)
                all_query_list.append(get)
            all_query = list(chain.from_iterable(all_query_list))
            return all_query
        except Exception as e:
            print(f"Exception {e}")

    def operational_information_from_date(self, date):
        """
        Api function
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        """
        try:
            smena = set(self.smena.filter(operational_information__date=date))
            all_query_list = []
            for x in smena:
                get = x.operational_information.filter(date=date)
                all_query_list.append(get)
            all_query = list(chain.from_iterable(all_query_list))
            return all_query
        except Exception as e:
            print(f"Exception {e}")

    def __str__(self):
        return (f'/ –°—É–±—ä–µ–∫—Ç: {self.area}' +
                f'/ –ì–æ—Ä–æ–¥: {self.city}' +
                f'/ –£–ª–∏—Ü–∞: {self.street}' +
                f'/ –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {self.manage_org}')

    class Meta:
        verbose_name = '2) –í–ù–° --> –í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è'
        verbose_name_plural = '2) –í–ù–° --> –í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏'


class WaterPumpingStationPump(models.Model):
    """
    –í–ù–°
    –ù–∞—Å–æ—Å
    """
    PUMP_PURPOSE_CHOICES = (
        ("–û—Å–Ω–æ–≤–Ω–æ–π", "–û—Å–Ω–æ–≤–Ω–æ–π"),
        ("–†–µ–∑–µ—Ä–≤–Ω—ã–π", "–†–µ–∑–µ—Ä–≤–Ω—ã–π"),
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    water_pumping_station = models.ForeignKey(
        WaterPumpingStation,
        on_delete=models.CASCADE,
        related_name='water_pumping_station_pump',
        verbose_name='–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    number_of_line = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä –ª–∏–Ω–∏–∏', null=True, blank=True)
    type_of_pump = models.CharField(max_length=255, verbose_name='–¢–∏–ø –Ω–∞—Å–æ—Å–∞', null=True, blank=True)
    pump_purpose = models.CharField(max_length=31, choices=PUMP_PURPOSE_CHOICES, verbose_name='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–æ—Å–∞',
                                    blank=True)
    mark_of_pump = models.CharField(max_length=255, verbose_name='–ú–∞—Ä–∫–∞ –Ω–∞—Å–æ—Å–∞', null=True, blank=True)
    manufacturer_pump_number = models.CharField(max_length=255, verbose_name='–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä', unique=True, blank=True,
                                                null=True, )
    year_of_pump = models.DateField(verbose_name='–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', null=True, blank=True)
    efficiency_pump = models.FloatField(verbose_name='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞, –º·∂æ/ —á–∞—Å',
                                        help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    pump_pressuere = models.FloatField(verbose_name='–ù–∞–ø–æ—Ä, –ú–ø–∞', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    brand_of_electric_motor = models.CharField(max_length=255, verbose_name='–¢–∏–ø, –º–∞—Ä–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è', null=True,
                                               blank=True)
    power_of_electric_motor = models.FloatField(verbose_name='–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç', null=True, blank=True)
    number_of_revolutions = models.FloatField(verbose_name='–ß–∏—Å–ª–æ –æ–±–æ—Ä–æ—Ç–æ–≤, –æ–±/–º–∏–Ω', null=True, blank=True)
    history = HistoricalRecords()

    def last_water_pumping_station_pump_repair(self):
        """
        Api function
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–º–æ–Ω—Ç—ã –Ω–∞—Å–æ—Å–∞ –Ω–∞ –í–ó–£
        """
        try:
            return self.water_pumping_station_pump_repair.last()
        except Exception as e:
            print(f"Excpetion {e}")

    def __str__(self):
        return (f'–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞—Å–æ—Å–∞: {self.manufacturer_pump_number}' +
                f'/–í–ù–°: {self.water_pumping_station}')

    class Meta:
        verbose_name = '2) –í–ù–° --> –ù–∞—Å–æ—Å –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏'
        verbose_name_plural = '2) –í–ù–° --> –ù–∞—Å–æ—Å—ã –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π'


class WaterPumpingStationPumpConventer(models.Model):
    """
    –í–ù–°
    –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å
    """
    water_pumping_station_pump = models.ForeignKey(
        WaterPumpingStationPump,
        on_delete=models.CASCADE,
        related_name='water_pumping_station_pump_conventer',
        verbose_name='–ù–∞—Å–æ—Å –Ω–∞ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏',
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    frequency_converter = models.CharField(max_length=255, verbose_name='–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å N—á', null=True,
                                           blank=True)
    type_of_frequency_converter = models.CharField(max_length=255, verbose_name='–¢–∏–ø, –º–∞—Ä–∫–∞ N—á', null=True,
                                                   blank=True)
    year_of_frequency_converter = models.DateField(verbose_name='–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é(N—á)',
                                                   null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'N—á: {self.frequency_converter}' +
                f'/ –ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞—Å–æ—Å–∞: {self.water_pumping_station_pump.manufacturer_pump_number}' +
                f'/–í–ù–°: {self.water_pumping_station_pump.water_pumping_station}'
                )

    class Meta:
        verbose_name = '2) –í–ù–° --> –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –í–ù–°'
        verbose_name_plural = '2) –í–ù–° --> –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –í–ù–°'


class WaterPumpingStationConventerRepair(models.Model):
    """
    –í–ù–°
    –†–µ–º–Ω–æ—Ç/–∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–≤–æ–∞—Ç–µ–ª—è
    """
    water_pumping_station_conventer = models.ForeignKey(
        WaterPumpingStationPumpConventer,
        on_delete=models.CASCADE,
        related_name='water_pumping_station_conventer_repair',
        verbose_name='N—á',
    )
    TYPE_CHOICES = (
        ("–ê–≤–∞—Ä–∏—è", "–ê–≤–∞—Ä–∏—è"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    date_of_repair_frequency_converter = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞(N—á)',
                                                          null=True, blank=True)
    type_of_repair_frequency_converter = models.CharField(max_length=255,
                                                          verbose_name='–¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–Ω–æ–Ω—Ç–∞(N—á)',
                                                          null=True, blank=True, choices=TYPE_CHOICES)
    date_of_technical_inspection_frequency_converter = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞(N—á)',
                                                                        null=True, blank=True)
    conclusion_frequency_converter = models.CharField(max_length=255,
                                                      verbose_name='–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞(N—á)',
                                                      null=True, blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'ID: {self.pk}' +
                f'/ N—á: {self.water_pumping_station_conventer.frequency_converter}' +
                f'/ –ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞—Å–æ—Å–∞: {self.water_pumping_station_conventer.water_pumping_station_pump.manufacturer_pump_number}' +
                f'/ ID –í–ù–°: {self.water_pumping_station_conventer.water_pumping_station_pump.water_pumping_station.pk}')

    class Meta:
        verbose_name = '2) –í–ù–° --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –í–ù–°'
        verbose_name_plural = '2) –í–ù–° --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –í–ù–°'


class WaterPumpingStationPumpRepair(models.Model):
    """
    –í–ù–°
    –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –Ω–∞—Å–æ—Å–æ–≤
    """
    water_pumping_station_pump = models.ForeignKey(
        WaterPumpingStationPump,
        on_delete=models.CASCADE,
        related_name='water_pumping_station_pump_repair',
        verbose_name='–ù–∞—Å–æ—Å –Ω–∞ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏',
    )
    TYPE_CHOICES = (
        ("–®—É–º, —Å—Ç—É–∫", "–®—É–º, —Å—Ç—É–∫"),
        ("–í–∏–±—Ä–∞—Ü–∏—è –ø–æ–≤—ã—à.", "–í–∏–±—Ä–∞—Ü–∏—è –ø–æ–≤—ã—à."),
        ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ > 70–≥—Ä.", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ > 70–≥—Ä."),
        ("–î—ã–º, –∏–∑–æ–ª—è—Ü–∏—è", "–î—ã–º, –∏–∑–æ–ª—è—Ü–∏—è"),
        ("–ú–µ—Ö. –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", "–ú–µ—Ö. –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"),
        ("–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π", "–ù–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    BROKEN_CHOICES = (
        ("–ó–∞–ø–æ—Ä–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞", "–ó–∞–ø–æ—Ä–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞"),
        ("–ê–≥—Ä–µ–≥–∞—Ç –Ω–∞—Å–æ—Å–Ω—ã–π", "–ê–≥—Ä–µ–≥–∞—Ç –Ω–∞—Å–æ—Å–Ω—ã–π"),
        ("–ö–ò–ü–∏–ê", "–ö–ò–ü–∏–ê"),
        ("N –ª–∏–Ω–∏–∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞", "N –ª–∏–Ω–∏–∏ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞"),
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True, auto_now_add=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞', null=True, blank=True,
                                      choices=TYPE_CHOICES)
    broken = models.CharField(max_length=255, verbose_name="–°–ª–æ–º–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", choices=BROKEN_CHOICES, null=True,
                              blank=True)
    date_of_maintenance = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', null=True,
                                           blank=True)
    type_of_maintenance = models.CharField(max_length=255, verbose_name='–í–∏–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
                                           null=True, blank=True)
    date_of_technical_inspection = models.DateField(verbose_name='–î–∞—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True, blank=True)
    conclusion_of_technical_inspection = models.CharField(max_length=255,
                                                          verbose_name='–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞', null=True,
                                                          blank=True)
    note = models.CharField(max_length=255, verbose_name="–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞—Å–æ—Å–∞: {self.water_pumping_station_pump.manufacturer_pump_number}' +
                f'–í–ù–°: {self.water_pumping_station_pump.water_pumping_station}')

    class Meta:
        verbose_name = '2) –í–ù–° --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –Ω–∞—Å–æ—Å–∞ –Ω–∞ –í–ù–°'
        verbose_name_plural = '2) –í–ù–° --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –Ω–∞—Å–æ—Å–∞ –Ω–∞ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏'


class WaterTower(models.Model):
    """–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è"""
    MATERIAL_CHOICES = (
        ("–ú–µ—Ç–∞–ª–ª", "–ú–µ—Ç–∞–ª–ª"),
        ("–ö–∏—Ä–ø–∏—á", "–ö–∏—Ä–ø–∏—á"),
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    type = models.CharField(max_length=255, verbose_name='–¢–∏–ø, –º–æ–¥–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', null=True, blank=True)
    working_volume = models.FloatField(verbose_name='–†–∞–±–æ—á–∏–π –æ–±—ä–µ–º, –∫—É–±.–º', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    cadastral_number = models.CharField(max_length=25, verbose_name='–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä', unique=True, null=True,
                                        help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ', )
    inventory_number = models.FloatField(verbose_name='–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä', null=True, blank=True)
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True)
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    year_install = models.DateField(verbose_name='–ì–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', null=True, blank=True)
    year_of_commissioning = models.DateField(verbose_name='–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', help_text='–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
    manufacturer_number = models.FloatField(verbose_name='–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä', null=True, blank=True)
    material = models.CharField(max_length=20, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', choices=MATERIAL_CHOICES)
    number_of_sensors = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, —à—Ç.', null=True,
                                                       blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {self.cadastral_number}'

    class Meta:
        verbose_name = "3) –í–ù–ë --> –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è"
        verbose_name_plural = "3) –í–ù–ë --> –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—ã–µ –±–∞—à–Ω–∏"


class WaterTowerRepairData(models.Model):
    """–†–µ–º–æ–Ω—Ç/–ó–∞–º–µ–Ω–∞ –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–æ–π –±–∞—à–Ω–∏"""
    water_tower = models.ForeignKey(
        WaterTower,
        on_delete=models.CASCADE,
        related_name='water_tower_repair_data',
    )
    TYPE_CHOICES = (
        ("–ö–ò–ü–∏–ê", "–ö–ò–ü–∏–ê"),
        ("–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "–ò–Ω—Ü–∏–¥–µ–Ω—Ç")
    )
    time = models.TimeField(verbose_name='–í—Ä–µ–º—è', null=True, blank=True, auto_now_add=True)
    shift_number = models.SmallIntegerField(verbose_name='–ù–æ–º–µ—Ä —Å–º–µ–Ω—ã', null=True, blank=True)
    fullname = models.CharField(max_length=255, verbose_name="–î–µ–∂—É—Ä–Ω–∞—è —Å–º–µ–Ω–∞, –§–ò–û", null=True, blank=True)
    type_of_repair = models.CharField(max_length=255, verbose_name='–í–∏–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞',
                                      null=True, blank=True, choices=TYPE_CHOICES)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞, –∑–∞–º–µ–Ω—ã', null=True, blank=True)
    description_repair = models.CharField(max_length=255, verbose_name='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {self.water_tower}'

    class Meta:
        verbose_name = '3) –í–ù–ë --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–æ–π –±–∞—à–Ω–∏'
        verbose_name_plural = '3) –í–ù–ë --> –†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—ã—Ö –±–∞—à–µ–Ω'


class WaterTowerTechnicalInformation(models.Model):
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–æ–π –±–∞—à–Ω–∏"""
    water_tower = models.OneToOneField(
        WaterTower,
        on_delete=models.CASCADE,
        related_name='water_tower_technical_information',
        verbose_name='–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è',
        primary_key=True,
    )
    circuit_voltage = models.IntegerField(verbose_name='–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Ü–µ–ø–∏, –í', null=True, blank=True)
    amount_of_chanels = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–ª–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, —à—Ç.', null=True,
                                                       blank=True)
    microcontroller_voltage = models.FloatField(verbose_name='–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è –≤ —Ü–µ–ø–∏ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, –í',
                                                null=True, blank=True)
    power_circuit_voltage = models.IntegerField(verbose_name='–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ —Ü–µ–ø—è—Ö –ø–∏—Ç–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤, –í', null=True,
                                                blank=True)
    fluctuations_interval = models.FloatField(verbose_name='–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è,%', null=True,
                                              blank=True)
    power_consumption = models.FloatField(verbose_name='–ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å, –¥–æ, –í—Ç', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {self.water_tower}'

    class Meta:
        verbose_name = '3) –í–ù–ë --> –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–æ–π –±–∞—à–Ω–∏'
        verbose_name_plural = '3) –í–ù–ë --> –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—ã—Ö –±–∞—à–µ–Ω'


class WaterTank(models.Model):
    """
    –†–µ–∑–µ—Ä–≤—É–∞—Ä
    –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    water_pumping_station = models.ForeignKey(
        WaterPumpingStation,
        on_delete=models.CASCADE,
        related_name='water_tank',
        verbose_name='–í–ù–°',
        null=True, blank=True,
    )
    TYPE_OF_PAVILION_CHOICES = (
        ("–ù–∞–¥–∑–µ–º–Ω—ã–π", "–ù–∞–¥–∑–µ–º–Ω—ã–π"),
        ("–ó–∞–≥–ª—É–±–ª–µ–Ω–Ω—ã–π", "–ó–∞–≥–ª—É–±–ª–µ–Ω–Ω—ã–π"),
        ("–ü–æ–¥–∑–µ–º–Ω—ã–π", "–ü–æ–¥–∑–µ–º–Ω—ã–π"),
    )
    TANK_FORM_CHOICES = (
        ("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π"),
        ("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏–π"),
    )
    MATERIAL_CHOICES = (
        ("–ú–µ—Ç–∞–ª–ª", "–ú–µ—Ç–∞–ª–ª"),
        ("–ö–∏—Ä–ø–∏—á", "–ö–∏—Ä–ø–∏—á"),
    )
    STATUS_CHOICES = (
        ("–í —Ä–∞–±–æ—Ç–µ", "–í —Ä–∞–±–æ—Ç–µ"),
        ("–í —Ä–µ–∑–µ—Ä–≤–µ", "–í —Ä–µ–∑–µ—Ä–≤–µ"),
        ("–í —Ä–µ–º–æ–Ω—Ç–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ"),
    )
    status = models.CharField(max_length=100, choices=STATUS_CHOICES, verbose_name="–°—Ç–∞—Ç—É—Å", null=True)
    purpose = models.CharField(max_length=255, verbose_name='–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', null=True, blank=True)
    capacity = models.FloatField(verbose_name='–ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∫—É–±. –º', null=True, blank=True)
    length = models.FloatField(verbose_name='–î–ª–∏–Ω–Ω–∞', null=True, blank=True)
    width = models.FloatField(verbose_name='–®–∏—Ä–∏–Ω–∞', null=True, blank=True)
    height = models.FloatField(verbose_name='–í—ã—Å–æ—Ç–∞', null=True, blank=True)
    diametr = models.FloatField(verbose_name='–î–∏–∞–º–µ—Ç—Ä', null=True, blank=True)
    cadastral_number = models.CharField(max_length=255, verbose_name='–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä')
    inventory_number = models.CharField(max_length=255, verbose_name='–ò–Ω–≤–µ—Ä—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä', unique=True)
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True)
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    year_of_installation = models.DateField(verbose_name='–ì–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', null=True, blank=True)
    year_of_entered = models.DateField(verbose_name='–ì–æ–¥ –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é', null=True, blank=True)
    type_of_pavilion = models.CharField(max_length=30, verbose_name='–í–∏–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è',
                                        choices=TYPE_OF_PAVILION_CHOICES)
    tank_form = models.CharField(max_length=30, verbose_name='–§–æ—Ä–º–∞ —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞', choices=TANK_FORM_CHOICES)
    material = models.CharField(max_length=15, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', choices=MATERIAL_CHOICES)
    history = HistoricalRecords()

    def __str__(self):
        return (f'–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {self.inventory_number}' +
                f'/–í–ù–°: {self.water_pumping_station}')

    class Meta:
        verbose_name = '4) –†–µ–∑–µ—Ä–≤—É–∞—Ä'
        verbose_name_plural = '4) –†–µ–∑–µ—Ä–≤—É–∞—Ä—ã'
        ordering = ["-inventory_number"]


class WaterTankRepair(models.Model):
    """–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞"""
    water_tank = models.ForeignKey(
        WaterTank,
        on_delete=models.CASCADE,
        related_name='water_tank_repair',
        verbose_name='–†–µ–∑–µ—Ä–≤—É–∞—Ä',
    )
    date_exam = models.DateField(verbose_name='–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', null=True, blank=True)
    type_exam = models.CharField(max_length=255, verbose_name='–í–∏–¥ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', null=True, blank=True)
    date_of_repair = models.DateField(verbose_name='–î–∞—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞, –∑–∞–º–µ–Ω—ã', null=True, blank=True)
    description_repair = models.CharField(max_length=255, verbose_name='–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', null=True, blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return f'{self.water_tank}'

    class Meta:
        verbose_name = '4) –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–∞'
        verbose_name_plural = '4) –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤'


class PrefabricateWaterPipeline(models.Model):
    """–°–±–æ—Ä–Ω—ã–π –≤–æ–¥–æ–≤–æ–¥"""

    water_pumping_station = models.ForeignKey(
        WaterPumpingStation,
        on_delete=models.CASCADE,
        related_name='prefabricate_water_pipeline',
        verbose_name='–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–æ-–Ω–∞—Å–æ—Å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
    )
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True, )
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True, )
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    total_length = models.FloatField(verbose_name='–û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞, –º', null=True, blank=True, )
    number_of_wells = models.PositiveBigIntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–¥—Ü–µ–≤', null=True, blank=True, )
    laying_method = models.CharField(max_length=255, verbose_name='–°–ø–æ—Å–æ–± –ø—Ä–æ–∫–ª–∞–¥–∫–∏', null=True, blank=True, )
    scheme_prefabricate_water_pipeline = models.ImageField(upload_to=water_pipeline_scheme,
                                                           verbose_name=' –°—Ö–µ–º–∞ —Å–±–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞', null=True,
                                                           blank=True)
    history = HistoricalRecords()

    def __str__(self):
        return (f'ID –°–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞: {self.pk}' +
                f'//–í–ó–£: {self.water_pumping_station}')

    class Meta:
        verbose_name = '5) –°–±–æ—Ä–¥–Ω—ã–π –≤–æ–¥–æ–≤–æ–¥'
        verbose_name_plural = '5) –°–±–æ—Ä–Ω—ã–µ –≤–æ–¥–æ–≤–æ–¥—ã'


class SectionOfTheWaterPipeline(models.Model):
    """–£—á–∞—Å—Ç–æ–∫ —Å–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞"""
    water_pipeline = models.ForeignKey(
        PrefabricateWaterPipeline,
        on_delete=models.CASCADE,
        related_name='section_of_the_water_pipeline',
        verbose_name='–°–±–æ—Ä–Ω—ã–π –≤–æ–¥–æ–≤–æ–¥',
    )
    length = models.FloatField(verbose_name='–î–ª–∏–Ω–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞ —É—á–∞—Å—Ç–∫–∞, –º', null=True, blank=True, )
    plot_number = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞', null=True, blank=True, )
    section_diametr = models.FloatField(verbose_name='–î–∏–∞–º–µ—Ç—Ä –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞, –º–º', null=True,
                                        blank=True, )
    history = HistoricalRecords()

    def __str__(self):
        return (f'{self.water_pipeline} ' +
                f' //–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {self.plot_number}')

    class Meta:
        verbose_name = '5) –£—á–∞—Å—Ç–æ–∫ —Å–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞'
        verbose_name_plural = '5) –£—á–∞—Å—Ç–∫–∏ —Å–±–æ—Ä–Ω–æ–≥–æ –≤–æ–¥–æ–≤–æ–¥–∞'


class Pit(models.Model):
    """–õ—é–∫//–ö–æ–ª–æ–¥–µ—Ü"""
    GATHERING_CHOICES = (
        ("–°–∫–æ–±—ã", "–°–∫–æ–±—ã"),
        ("–õ–µ—Å—Ç–Ω–∏—Ü–∞", "–õ–µ—Å—Ç–Ω–∏—Ü–∞"),
    )
    water_pipeline = models.ForeignKey(
        SectionOfTheWaterPipeline,
        on_delete=models.CASCADE,
        related_name='pit_on_section',
        verbose_name='–°–±–æ—Ä–Ω—ã–π –≤–æ–¥–æ–≤–æ–¥',
    )
    area = models.CharField(max_length=255, verbose_name='–°—É–±—ä–µ–∫—Ç', null=True, blank=True)
    district = models.CharField(max_length=255, verbose_name='–†–∞–π–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=255, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    location = models.CharField(max_length=255, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', null=True, blank=True)
    street = models.CharField(max_length=255, verbose_name='–£–ª–∏—Ü–∞', null=True, blank=True)
    house = models.CharField(max_length=255, verbose_name='–î–æ–º', null=True, blank=True)
    pit_number = models.PositiveBigIntegerField(verbose_name='–ù–æ–º–µ—Ä –∫–æ–ª–æ–¥—Ü–∞, N–∫', null=True, blank=True)
    diametr_pit = models.FloatField(verbose_name='–î–∏–∞–º–µ—Ç—Ä', null=True, blank=True)
    deep = models.FloatField(verbose_name='–ì–ª—É–±–∏–Ω–∞', null=True, blank=True)
    material = models.CharField(max_length=255, verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', null=True, blank=True)
    diametr_hatch = models.FloatField(verbose_name='–õ—é–∫ –¥–∏–∞–º–µ—Ç—Ä, –º', null=True, blank=True)
    gathering = models.CharField(max_length=10, verbose_name='–°—Ö–æ–¥', null=True, blank=True, choices=GATHERING_CHOICES)
    history = HistoricalRecords()

    def __str__(self):
        return (f'{self.water_pipeline.water_pipeline}' +
                f'  –ù–æ–º–µ—Ä —É—á–∞—Å–∫–∞: {self.water_pipeline.plot_number}')

    class Meta:
        verbose_name = "5) –õ—é–∫"
        verbose_name_plural = "5) –õ—é–∫–∏"
