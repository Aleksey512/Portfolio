{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Qt",
				"QtGui"
			],
			[
				"QF",
				"QFont"
			],
			[
				"Exp",
				"Exception"
			],
			[
				"df",
				"df_inc"
			],
			[
				"data",
				"data_fact"
			],
			[
				"li",
				"linestyle"
			],
			[
				"font",
				"font-size"
			],
			[
				"da",
				"datetime"
			],
			[
				"a",
				"all_days"
			],
			[
				"mo",
				"month_lenght"
			],
			[
				"line",
				"linestyle"
			],
			[
				"q",
				"query_inc"
			],
			[
				"plo",
				"plot_year_all"
			],
			[
				"tab7",
				"tab7_plot_clicked"
			],
			[
				"exp",
				"exp_query"
			],
			[
				"tab7_",
				"tab7_plot"
			],
			[
				"fot",
				"font-style"
			],
			[
				"tab1",
				"tab1_pushButton"
			],
			[
				"gra",
				"lightslategray"
			],
			[
				"whi",
				"ghostwhite"
			],
			[
				"daa",
				"data_fact"
			],
			[
				"la",
				"lambda"
			],
			[
				"auto",
				"autotext_1"
			],
			[
				"font-",
				"font-style"
			],
			[
				"light",
				"lightcoral"
			],
			[
				"lightg",
				"lightgray"
			],
			[
				"op",
				"opacity"
			],
			[
				"back",
				"background"
			],
			[
				"Фак",
				"Фактический"
			],
			[
				"set_xt",
				"set_xticks"
			],
			[
				"set_x",
				"set_xlabel"
			],
			[
				"set_",
				"set_xticks"
			],
			[
				"x",
				"x_fact"
			],
			[
				"mon",
				"months_dict"
			],
			[
				"tab",
				"tab6_layout"
			],
			[
				"Na",
				"NavigationToolbar"
			],
			[
				"кате",
				"Категория"
			],
			[
				"qu",
				"query_not_fact"
			],
			[
				"F",
				"False"
			],
			[
				"расх",
				"расхода"
			],
			[
				"set",
				"set_xticks"
			],
			[
				"plot",
				"plot_year"
			],
			[
				"c",
				"connect"
			],
			[
				"tab5_plot",
				"tab5_plot_year"
			],
			[
				"to",
				"today"
			],
			[
				"remve",
				"removeWidget"
			],
			[
				"ex",
				"except"
			],
			[
				"sta",
				"statistic"
			],
			[
				"Q",
				"QtGui"
			],
			[
				"in",
				"income_df"
			],
			[
				"inc",
				"income_df"
			],
			[
				"Ex",
				"expeness_df"
			],
			[
				"r",
				"row_as_dict"
			],
			[
				"row",
				"row_as_dict"
			],
			[
				"ses",
				"ses_query"
			],
			[
				"mat",
				"matplotlib"
			],
			[
				"se",
				"setupUi"
			],
			[
				"cl",
				"clicked"
			],
			[
				"tab_push",
				"tab1_pushButton_3"
			],
			[
				"tab1_da",
				"tab1_day_show_button_clicked"
			],
			[
				"tab1_pu",
				"tab1_pushButton_2"
			],
			[
				"val",
				"values"
			],
			[
				"e",
				"engine"
			],
			[
				"sql",
				"sqlite3"
			],
			[
				"s",
				"spongebob"
			],
			[
				"Se",
				"Session"
			],
			[
				"QTa",
				"QTableWidget"
			],
			[
				"U",
				"Ui_MainWindow"
			],
			[
				"add",
				"add_to_db"
			],
			[
				"In",
				"Income"
			],
			[
				"cre",
				"create_engine"
			],
			[
				"Da",
				"Date"
			],
			[
				"year",
				"year_box"
			],
			[
				"MO",
				"MONTH"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 37712,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					55,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "UI.py",
			"settings":
			{
				"buffer_size": 45388,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAq5QAAAAAAACrlAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/User/Terminal_Python_VENV.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Terminal_Python.sublime-build",
					""
				],
				[
					"Packages/User/Terminal_Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/User/Terminal_Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Terminal_Python_VENV.sublime-build",
					""
				],
				[
					"Packages/User/Terminal_Python_VENV.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/User/Terminal_Python_VENV.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"autod",
				"AutoDocstring: Current"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"run",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"re",
				"Permute Lines: Reverse"
			],
			[
				"Package Control: re",
				"Package Control: Remove Channel"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"auto",
				"Toggle AutoSave: all files"
			],
			[
				"isntall ",
				"Package Control: Install Package"
			],
			[
				"pakage ",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 130.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/portable/PycharmProjects/IncomesAndExpeness"
	],
	"file_history":
	[
		"/home/portable/PycharmProjects/IncomesAndExpeness/.gitignore",
		"/home/portable/PycharmProjects/IncomesAndExpeness/UI.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/main.py",
		"/home/portable/.config/sublime-text/Packages/User/AutoDocstring.sublime-settings",
		"/home/portable/.config/sublime-text/Packages/User/Default (Linux).sublime-keymap",
		"/home/portable/.config/sublime-text/Packages/User/Terminal_Python.sublime-build",
		"/home/portable/.config/sublime-text/Packages/SublimeREPL/config/Python/Main.sublime-menu",
		"/home/portable/.config/sublime-text/Packages/User/SublimeREPL.sublime-settings",
		"/home/portable/.config/sublime-text/Packages/User/python3.sublime-build",
		"/home/portable/.config/sublime-text/Packages/User/Pylinter.sublime-settings",
		"/home/portable/PycharmProjects/IncomesAndExpeness/IncomeAndExpeness.sublime-project",
		"/home/portable/.config/sublime-text/Packages/Jedi - Python autocompletion/sublime_jedi/utils.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/statistic.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/db.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/myStyle.qss",
		"/home/portable/PycharmProjects/IncomesAndExpeness/build/main/statistic.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/requirments.txt",
		"/home/portable/.config/sublime-text/Packages/User/Default.sublime-mousemap",
		"/home/portable/.config/sublime-text/Packages/Pylinter/Default (Linux).sublime-keymap",
		"/home/portable/.config/sublime-text/Packages/User/Anaconda.sublime-settings",
		"/home/portable/.config/sublime-text/Packages/Anaconda/anaconda_lib/linting/pyflakes/checker.py",
		"/home/portable/.config/sublime-text/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/AMOLED.scss",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/myStyle.qrc",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/Ubuntu.qss",
		"/home/portable/PycharmProjects/IncomesAndExpeness/main.spec",
		"/home/portable/PycharmProjects/IncomesAndExpeness/db_models.py",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/ConsoleStyle.qss",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/AMOLED.qss",
		"/home/portable/PycharmProjects/IncomesAndExpeness/stylesheet/ElegantDark.qss",
		"/home/portable/PycharmProjects/IncomeAndExpeness/main.py",
		"/home/portable/PycharmProjects/IncomeAndExpeness/.gitignore",
		"/home/portable/PycharmProjects/IncomeAndExpeness/db_models.py",
		"/home/portable/PycharmProjects/IncomeAndExpeness/db.py",
		"/home/portable/PycharmProjects/IncomeAndExpeness/UI.py",
		"/home/portable/PycharmProjects/IncomeAndExpeness/untitled.ui",
		"/home/portable/PycharmProjects/v1.2/app/manage.py",
		"/home/portable/.config/sublime-text/Packages/Jedi - Python autocompletion/dependencies/jedi/third_party/django-stubs/django-stubs/core/management/__init__.pyi",
		"/home/portable/PycharmProjects/IncomeAndExpeness/venv/lib/python3.10/site-packages/jedi/third_party/django-stubs/django-stubs/core/management/base.pyi",
		"/home/portable/PycharmProjects/IncomeAndExpeness/venv/lib/python3.10/site-packages/jedi/third_party/django-stubs/django-stubs/core/management/__init__.pyi",
		"/home/portable/PycharmProjects/IncomeAndExpeness/myDB.db",
		"/home/portable/.config/sublime-text/Packages/All Autocomplete/All Autocomplete.sublime-settings",
		"/home/portable/.config/sublime-text/Packages/User/All Autocomplete.sublime-settings",
		"/home/portable/Auto.hh/main.py",
		"/home/portable/Auto.hh/.gitignore",
		"/home/portable/Auto.hh/requirments.txt",
		"/home/portable/MailingTestCase/MalingList/requirements.txt",
		"/home/portable/.config/sublime-text/Packages/User/auto_save.sublime-settings",
		"/home/portable/.config/sublime-text/Packages/User/1.py",
		"/home/portable/.config/sublime-text/Packages/User/Python-REPL.sublime-build"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 128.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Section",
			"Tabl",
			"table",
			"inc",
			"tab8_all_plan",
			"tab8_absolute",
			"tab8_relative",
			"tab8_all_fact",
			"inc",
			"color",
			"Fact",
			"Value",
			"Name",
			"Date",
			"LOOP_TYPES",
			"time.sleep(1)",
			"plot",
			"icon",
			"dateEdit_3"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"exp",
			"tab8_all_plan_2",
			"tab8_absolute_2",
			"tab8_relative_2",
			"tab8_all_fact_2",
			"epx",
			"fact",
			"value",
			"name",
			"date",
			"time.sleep(0.5)"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37712,
						"regions":
						{
						},
						"selection":
						[
							[
								311,
								311
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "UI.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45388,
						"regions":
						{
						},
						"selection":
						[
							[
								38059,
								38059
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17647.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 39.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/Terminal_Python_VENV.sublime-build",
	"project": "IncomeAndExpeness.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 238.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
